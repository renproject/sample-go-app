# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1


orbs:
    core: ren/core@0.0.1

executors:
  default:
    docker:
      # specify the version
      - image: circleci/golang:1.12
    working_directory: ~/sample-go-app

commands:
  stable_release:
    description: Creating Github Release
    steps:
      - core/install_ghr
      - run:
          name: Make zip
          command: |
            echo "tag is ${CIRCLE_TAG}"
            zip -r release.zip $(cat ./files.txt)
            echo "./release.zip" > "release_name"
      - core/github_release:
          tag: $CIRCLE_TAG
          replace: true
          filelist: release_name
  patch_version:
    description: Patches the version key of a JSON file with branch name and date
    parameters:
      file:
        description: The file to be patched
        type: string
    steps:
      - run:
          name: Install JQ
          command: |
            if ! [ -x "$(command -v jq)" ]; then
              sudo apt-get install jq
            fi
      - run:
          name: Patching version
          command: |
            branch=$(git branch | grep \* | cut -d ' ' -f2)
            if [ "${branch}" != "stable" ]
            then
              timestamp=$(date +"%Y%m%d")
              tmp=$(mktemp)
              jq --arg suffix "-${branch}.${timestamp}" '.version += $suffix' << parameters.file >> > "$tmp" && mv -f "$tmp" << parameters.file >>
            fi
  merge:
    description: "Merge from branch into another branch"
    parameters:
      from:
        description: The branch with changes to be merged into another branch
        type: string
      into:
        description: The branch onto which changes will be applied
        type: string
    steps:
      - checkout
      - core/rw_checkout
      - run:
          name: Merging branch
          command: |
            git reset --hard
            git checkout --track origin/<< parameters.into >>
            git merge origin/<< parameters.from >> -v
            git push

jobs:
  deploy:
    executor: default
    steps:
      - stable_release

# - checkout
# - run:
#     name: Merging test into master
#     command: |
#       RW_REPO_URL="https://${GITHUB_TOKEN}@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"
#       git remote set-url origin "${RW_REPO_URL}" || true
#       git fetch --force --all
#       git checkout master
#       git merge test
#       git push

  fake_activity:
    executor: default
    steps:
      - checkout
      - core/rw_checkout
      - run:
          name: Making a random commit
          command: |
            git reset --hard
            git checkout master
            git config --global user.name "CircleCI"
            git config --global user.email "circleci"
            export NUM="$(( ( RANDOM % 10 )  + 1 ))"
            echo "${NUM}" >> numbers.txt
            git commit -am "CircleCI - Add number (${NUM})"
            git push
  build:
    executor: default
    steps:
      - checkout
      - restore_cache:
          key: gomod-{{ .Branch }}-{{ checksum "go.sum" }}
          paths:
              - ~/sample-go-app/vendor
      - run:
          name: Download dependencies
          command: |
            if [ ! -d ~/sample-go-app/vendor ]; then
                go mod download
                go mod vendor
            else
                echo "Dependencies were restored from cache."
            fi
      - save_cache:
          key: gomod-{{ .Branch }}-{{ checksum "go.sum" }}
          paths:
              - ~/sample-go-app/vendor
      - run:
          name: Building and testing
          command: |
            cd cmd
            go build -v
            ./cmd

workflows:
  version: 2.1
  build:
    jobs:
    - build
    - deploy
        requires:
          - build
        filters:
          tags:
            only: /^v.*/
          branches:
            ignore: /.*/

#  nightly:
#    triggers:
#      - schedule:
#          cron: "0 2 * * *" # every night at 02:00
#          filters:
#            branches:
#              only:
#                - master
#    jobs:
#      - core/merge_nightly:
#          executor: default
#          filters:
#            branches:
#              only: master
#  monthly:
#    triggers:
#      - schedule:
#          cron: "0 0 1 * *" # on the 1st of every month at 00:00
#          filters:
#            branches:
#              only:
#                - master
#    jobs:
#      - core/merge_stable:
#          executor: default
#          filters:
#            branches:
#              only: master
#      - core/merge_beta:
#          executor: default
#          filters:
#            branches:
#              only: master
#          # Only run merge_beta after merge_stable is run
#          requires:
#            - core/merge_stable
